# name: NEXT Deploy
# on:
#   push:
#     branches: master
# jobs:
#   continuous-deployment:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source code.
#         uses: actions/checkout@v2
#         with:
#           ref: master
#       # - name: install serverless
#       #   run: npm i -g serverless@2.72.2
#       - name: Install serverless cli
#         run: npm install -g @serverless/cli
#       - name: npm Install
#         run: npm install
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}
#       - name: Deploy by serverless
#         run: components-v1

# name: NEXT Deploy with EC2
# on:
#   push:
#     branches: master
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source code.
#         uses: actions/checkout@v2
#       - name: Use Node.js 14.x
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14.x
#       - name: Install dependencies
#         run: npm install

#       - name: create env file
#         working-directory: ./server
#         run:
#           touch .env
#           cat << EOF >> .env
#           ${{ secrets.ENV }}

#       - name: zip distributions
#         run: zip -r domaindeploytest.zip ./client/dist ./server ./appspec.yml ./scripts

#       - name: AWS Configure credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-northeast-2

#       - name: upload to s3
#         run: aws s3 cp --region ap-northeast-2 ./domaindeploytest.zip s3://domaindeploytest/public/

#       - name: deploy with AWS codeDeploy
#         run: aws deploy create-deployment
#           --application-name zip-codedeploy
#           --deployment-config-name CodeDeployDefault.OneAtTime
#           --deployment-group-name domaindeploytestgroup
#           --s3-location bucket=domaindeploytest,bundleType=zip,key=public/domaindeploytest.zip

# -------------------------------------------------------------------------------------------------------------------

# name: Deploy to Amazon ECS

# on:
#   push:
#     branches: [master]

# env:
#   AWS_REGION: ap-northeast-2
#   ECR_REPOSITORY: domaindeploytest
#   ECS_SERVICE: domaindeploytestservice
#   ECS_CLUSTER: domaindeploytestcluster
#   ECS_TASK_DEFINITION: .aws/task-definition.json
#   CONTAINER_NAME: domaindeploytestcontainer

# defaults:
#   run:
#     shell: bash

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     permissions:
#       packages: write
#       contents: read

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true

# -------------------------------------------------------------------------------------------------------------------

name: Next Deploy on Google Cloud Run

on:
  push:
    branches: [ master ]

env:
  CLOUD_RUN_PROJECT_ID: ${{ secrets.CLOUD_RUN_PROJECT_NAME }}
  CLOUD_RUN_REGION: asia-northeast3
  REPO_NAME: domaindeploytest

jobs:
  build-and-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-to-assume: arn:aws:iam::980924604087:role/github-actions-role
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.CLOUD_RUN_PROJECT_NAME }}
          service_account_key: ${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}
          service_account_email: ${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT_EMAIL }}

      - name: Enable the necessary APIs and enable docker auth
        run: |-
          gcloud services enable containerregistry.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud --quiet auth configure-docker

      - name: Build and tag image
        run: |-
          docker build . --tag gcr.io/$CLOUD_RUN_PROJECT_ID/$REPO_NAME:$GITHUB_SHA

      - name: Push image to GCR
        run: |-
          docker push gcr.io/$CLOUD_RUN_PROJECT_ID/$REPO_NAME:$GITHUB_SHA

      - name: Deploy
        run: |-
          gcloud components install beta --quiet
          gcloud beta run deploy $REPO_NAME --image gcr.io/$CLOUD_RUN_PROJECT_ID/$REPO_NAME:$GITHUB_SHA \
            --project $CLOUD_RUN_PROJECT_ID \
            --platform managed \
            --region $CLOUD_RUN_REGION \
            --allow-unauthenticated \
            --quiet